package logan.sybilGUI;

import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import bayes.NaiveBayes2;
import dataframe.Column;
import dataframe.DataFrame;
import dataframe.Util;
import discreteize.EqualFrequencyBinning;
import scorer.ConfusionMatrix;
import scorer.CrossValidation;

/**
 * 
 * @author logan collier
 *
 */
public class ConfusionMatrix_Panel extends Tertiary_View{

	private ConfusionMatrix CM;
	
	public ConfusionMatrix_Panel(int width, int height, Color main_bg_color, Color main_side_color, int side_panel_W) {
		super(width, height, main_bg_color, main_side_color, side_panel_W);
		

        
	}
	private static ArrayList<DataFrame[]> setClasses(DataFrame df) {
		ArrayList<DataFrame[]> classes = new ArrayList<DataFrame[]>();
		for(Column i : df.target_columns) {
			classes.add(Util.splitOnTarget(df, i));
		}
		return classes;
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
	
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    protected void initComponents() {

    	
		String file = "testfiles/iris.txt";
        DataFrame df = DataFrame.read_csv(file);
        df.convertNANS_mode();
        df.setColumnType(4, 'T');
        //df.getColumn_byName("species").setType('T'); //set target column
        System.out.println("Number of targets: " + df.numTargets);
        
        System.out.println("Binning columns: ");
        EqualFrequencyBinning a = new EqualFrequencyBinning(8, df.getColumn(0));
        df.replaceColumn(0, a.binColumn());
        EqualFrequencyBinning b = new EqualFrequencyBinning(8, df.getColumn(1));
        df.replaceColumn(1, b.binColumn());
        EqualFrequencyBinning c = new EqualFrequencyBinning(8, df.getColumn(2));
        df.replaceColumn(2, c.binColumn());
        EqualFrequencyBinning d = new EqualFrequencyBinning(8, df.getColumn(3));
        //df.getColumn(3).printCol();
        System.out.println("\nPost binning: ");
        System.out.println("Size of column arraylist: "+ df.columns.size() + " - Recorded Num of columns: " + df.getNumColumns());
        df.replaceColumn(3, d.binColumn());
        System.out.println("Size of column arraylist: "+ df.columns.size() + " - Recorded Num of columns: " + df.getNumColumns());
        df.setColumnType(4, 'T');
        ArrayList<DataFrame[]> classes = setClasses(df);
        NaiveBayes2 nb = new NaiveBayes2(df);
        CrossValidation cv = new CrossValidation(df, 6, nb);
        //cv.printScores();
        cv.avgScores();
        cv.printOverAllScore();
        cv.sumConfusionMatrix();
        cv.confusion_matrix.print_matrix();
        CM = cv.confusion_matrix;
        int[][] mmm = cv.getOverallMatrix("species");
        
        top_panel = new javax.swing.JPanel();
        matrix_panel = new javax.swing.JPanel();
        bottom_panel = new javax.swing.JPanel();
        
        accuracy_label = new javax.swing.JLabel();
        accuracy_display = new javax.swing.JLabel();
        tp_label = new javax.swing.JLabel();
        tp_display = new javax.swing.JLabel();
        precision_label = new javax.swing.JLabel();
        precision_display = new javax.swing.JLabel();
        tn_label = new javax.swing.JLabel();
        tn_display = new javax.swing.JLabel();
        f1_label = new javax.swing.JLabel();
        f1_display = new javax.swing.JLabel();
        fp_label = new javax.swing.JLabel();
        fp_display = new javax.swing.JLabel();
        mcc_label = new javax.swing.JLabel();
        mcc_display = new javax.swing.JLabel();
        fn_label = new javax.swing.JLabel();
        fn_display = new javax.swing.JLabel();
        actual_label = new javax.swing.JLabel();
        predicted_label = new javax.swing.JLabel();


        setBackground(main_bg_color);
        
        top_panel.setBackground(main_side_color);
        top_panel.setLayout(new java.awt.GridLayout(4, 4));


        accuracy_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        accuracy_label.setForeground(new java.awt.Color(153, 153, 153));
        accuracy_label.setText("Accuracy:");
        top_panel.add(accuracy_label);

        accuracy_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        accuracy_display.setForeground(new java.awt.Color(153, 153, 153));
        accuracy_display.setText("acc");
        top_panel.add(accuracy_display);

        tp_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        tp_label.setForeground(new java.awt.Color(153, 153, 153));
        tp_label.setText("True Positives:");
        top_panel.add(tp_label);

        tp_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        tp_display.setForeground(new java.awt.Color(153, 153, 153));
        tp_display.setText("tp");
        top_panel.add(tp_display);

        precision_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        precision_label.setForeground(new java.awt.Color(153, 153, 153));
        precision_label.setText("Precision:");
        top_panel.add(precision_label);

        precision_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        precision_display.setForeground(new java.awt.Color(153, 153, 153));
        precision_display.setText("prec");
        top_panel.add(precision_display);

        tn_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        tn_label.setForeground(new java.awt.Color(153, 153, 153));
        tn_label.setText("True Negatives:");
        top_panel.add(tn_label);

        tn_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        tn_display.setForeground(new java.awt.Color(153, 153, 153));
        tn_display.setText("tn");
        top_panel.add(tn_display);

        f1_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        f1_label.setForeground(new java.awt.Color(153, 153, 153));
        f1_label.setText("F1 Score:");
        top_panel.add(f1_label);

        f1_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        f1_display.setForeground(new java.awt.Color(153, 153, 153));
        f1_display.setText("f1");
        top_panel.add(f1_display);

        fp_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        fp_label.setForeground(new java.awt.Color(153, 153, 153));
        fp_label.setText("False Positives:");
        top_panel.add(fp_label);

        fp_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        fp_display.setForeground(new java.awt.Color(153, 153, 153));
        fp_display.setText("fp");
        top_panel.add(fp_display);

        mcc_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        mcc_label.setForeground(new java.awt.Color(153, 153, 153));
        mcc_label.setText("M-Coefficent:");
        top_panel.add(mcc_label);

        mcc_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        mcc_display.setForeground(new java.awt.Color(153, 153, 153));
        mcc_display.setText("mcc");
        top_panel.add(mcc_display);

        fn_label.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        fn_label.setForeground(new java.awt.Color(153, 153, 153));
        fn_label.setText("False Negatives:");
        top_panel.add(fn_label);

        fn_display.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        fn_display.setForeground(new java.awt.Color(153, 153, 153));
        fn_display.setText("fn");
        top_panel.add(fn_display);
        center_panel.add(top_panel);
        
        bottom_panel.setPreferredSize(new Dimension(W-side_panel_W, H-top_panel.getPreferredSize().height));
        //center_panel.setBackground(new java.awt.Color(102, 102, 102));
        bottom_panel.setBackground(main_bg_color);
        bottom_panel.setLayout(new java.awt.BorderLayout());

        actual_label.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        actual_label.setForeground(new java.awt.Color(204, 204, 204));
        actual_label.setText("Actual");
        bottom_panel.add(actual_label, java.awt.BorderLayout.LINE_START);

        predicted_label.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        predicted_label.setForeground(new java.awt.Color(204, 204, 204));
        predicted_label.setText("Predicted");
        bottom_panel.add(predicted_label, java.awt.BorderLayout.NORTH);

        //matrix_panel.setMaximumSize(new java.awt.Dimension(800, 500));
        //matrix_panel.setMinimumSize(new java.awt.Dimension(600, 300));
        matrix_panel.setPreferredSize(new Dimension(500,350));

        matrix_panel.setLayout(new java.awt.GridLayout(CM.truePositive.get("species").size()+2, CM.truePositive.get("species").size()+2));
        System.out.println("CM: "+CM.trueNegative.toString());
        
        java.awt.Color cc;
        int cy = 200;
        Set<Object> ccc = CM.trueNegative.get("species").keySet();
        ArrayList<Object>  clas = new ArrayList<Object>();
        for(Object k : ccc) {
        	clas.add(k);
        }
        int[][] rates = new int[CM.trueNegative.get("species").size()][CM.trueNegative.get("species").size()];
        
        for(int i = 0; i < CM.trueNegative.get("species").size();i++) {
        	System.out.println();
        	for(int j = 0; j < CM.trueNegative.get("species").size();j++) {
        		if(j == i) {
        			rates[i][j] = CM.truePositive.get("species").get(clas.get(j));
        		}else {
        			rates[i][j] = CM.falseNegative.get("species").get(clas.get(i)) - CM.falsePositive.get("species").get(clas.get(j));
        		}
        		System.out.print(rates[i][j]+" ");
        	}
        }
        System.out.println("INT MATRIX");
        for(int o = 0; o < mmm.length; o++) {
        	System.out.println();
        	for(int oo = 0; oo < mmm.length; oo++) {
        		System.out.print(mmm[o][oo]+" ");
        	}
        }
        int[] actual_totals = new int[mmm.length];
        int[] predict_totals = new int[mmm.length];
        int actu_tot = 0;
        int pred_tot = 0;
        int cnt = 0;
        int cnt2 =0;
        int c1 = 0, c2 = 0;
        for(int i = 0; i < CM.trueNegative.get("species").size()+2;i++) {
        	//c2=0;
        	for(int j = 0; j < CM.trueNegative.get("species").size()+2;j++) {
        		if(cnt > 2) cnt = 0;
        		if(cnt2 > 2) cnt2=0;
        		//0,0 target leabl
        		if(i == 0 && j == 0) {
        			JButton lab = new JButton("species");
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        		}
        		// top row , class labels
        		else if(i == 0 && j < CM.trueNegative.get("species").size()+1) {
        			JButton lab = new JButton(clas.get(cnt).toString());
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        			cnt++;
        		}
        		// last top row, total
        		else if(i == 0 && j == CM.trueNegative.get("species").size()+1) {
        			JButton lab = new JButton("Total");
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        			cnt=0;
        		}
        		else if(i == CM.trueNegative.get("species").size()+1 && j > 0) {
        			JButton lab = new JButton(String.valueOf(predict_totals[cnt]));
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        		}
        		else if(i == CM.trueNegative.get("species").size()+1) {
        			JButton lab = new JButton("Total");
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        		}

        		//first column, class labels
        		else if(j == 0 && i > 0) {
        			JButton lab = new JButton(clas.get(cnt).toString());
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        			cnt++;
        		}
        		else if(j < CM.trueNegative.get("species").size()+1 && j > 0){
	        		if(c2 == mmm.length) {
	        			c2 =0;
	        			actual_totals[c1] = actu_tot;
	        			predict_totals[c1] = pred_tot;
	        			actu_tot = 0;
	        			pred_tot = 0;
	        			c1++;
	        		}
        			actu_tot = actu_tot + mmm[c1][c2];
        			pred_tot = pred_tot + mmm[c2][c1];
        			JButton lab = new JButton(String.valueOf(mmm[c1][c2]));
        			c2++;
	        		//JButton lab = new JButton(CM.truePositive.get("species").get(clas.get(cnt2)).toString());
	        		//System.out.println(clas.get(cnt2) +"x: "+j+" Y: "+i);
	        		int g = CM.truePositive.get("species").get(clas.get(cnt2)) + CM.falseNegative.get("species").get(clas.get(cnt2));
	        		int dd = (int)(((double)CM.truePositive.get("species").get(clas.get(cnt2)) /g)*100);
	        		System.out.println("G: "+g+" D "+dd);
	        		lab.setBackground(new java.awt.Color(150, 150, 150));
	        		matrix_panel.add(lab);
	        		cy = cy - 5;
	        		cnt2++;
        		}
        		else if(i > 0  && j == CM.trueNegative.get("species").size()+1) {
        			JButton lab = new JButton(String.valueOf(actual_totals[cnt]));
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        		}
        		else if(j == CM.trueNegative.get("species").size()+1) {
        			JButton lab = new JButton("Total");
        			lab.setBackground(new java.awt.Color(200, 200, 200));
        			matrix_panel.add(lab);
        			//cnt++;
        		}
        		
        		//cnt++;
        	}
        }
        JPanel filler_panel1 = new JPanel();
        JPanel filler_panel2 = new JPanel();
        filler_panel1.setBackground(main_bg_color);
        filler_panel2.setBackground(main_bg_color);
        
        filler_panel1.setPreferredSize(new Dimension(500,100));
        filler_panel2.setPreferredSize(new Dimension(500,100));
        bottom_panel.add(matrix_panel, java.awt.BorderLayout.CENTER);
        bottom_panel.add(filler_panel1,java.awt.BorderLayout.EAST);
        bottom_panel.add(filler_panel1,java.awt.BorderLayout.SOUTH);
        center_panel.add(bottom_panel,java.awt.BorderLayout.CENTER);
        /*
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(top_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(center_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(top_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(center_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        */
	    add(side_panel, java.awt.BorderLayout.WEST);
	    add(center_panel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>                        


    // Variables declaration - do not modify     
    private javax.swing.JPanel top_panel;
    private javax.swing.JPanel matrix_panel;
    private javax.swing.JPanel bottom_panel;
    
    private javax.swing.JLabel accuracy_display;
    private javax.swing.JLabel accuracy_label;
    private javax.swing.JLabel actual_label;
    //private javax.swing.JPanel center_panel;
    private javax.swing.JLabel f1_display;
    private javax.swing.JLabel f1_label;
    private javax.swing.JLabel fn_display;
    private javax.swing.JLabel fn_label;
    private javax.swing.JLabel fp_display;
    private javax.swing.JLabel fp_label;
    private javax.swing.JLabel mcc_display;
    private javax.swing.JLabel mcc_label;
    private javax.swing.JLabel precision_display;
    private javax.swing.JLabel precision_label;
    private javax.swing.JLabel predicted_label;
    private javax.swing.JLabel tn_display;
    private javax.swing.JLabel tn_label;
    private javax.swing.JLabel tp_display;
    private javax.swing.JLabel tp_label;
    // End of variables declaration                   
}
